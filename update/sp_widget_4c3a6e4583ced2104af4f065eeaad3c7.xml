<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope, $http, spUtil) {
    // Widget controller
    var c = this;

		localStorage.removeItem('conversationId');
		localStorage.removeItem('conversationThreadId');
	
    c.conversation = $scope.data.conversation;
    c.conversationThread = $scope.data.thread;
    c.agentName = $scope.data.agentName.toUpperCase();
    c.userFullName = $scope.data.userFullName.toUpperCase();
    c.userName = $scope.data.userName.toUpperCase();

    c.currentConversation = checkAndSetConversationId();
    c.currentConversationThread = checkAndSetConversationThreadId();

    // Resets the chat input field
    c.chatInputReset = function (){
        $('#chat-input').val('').focus().blur().css('height', '48px');
    }

    // Creates a new conversation thread
    c.createThread = function() {
        c.data.action = 'createThread';
        c.data.frmInput = c.userInput;
        c.data.conversationId = c.currentConversation;
        c.data.conversationThreadId = c.currentConversationThread;
        c.userInput = '';
        c.chatInputReset();
        if (c.data.frmInput && c.data.frmInput !== '') {
            c.server.update().then(function(response) {
							localStorage.setItem('conversationThreadId', response.getNewestThreadId);
            });
        }
    };

    // Record watcher setup for new user messages
    var rcdWatchQuery1 = 'conversation_id=' + c.currentConversation + "^role=user";
    spUtil.recordWatch($scope, "x_neuronow_openai_conversation_message", rcdWatchQuery1, function(name){
        c.pullThreads();
    });

    // Record watcher setup for new assistant messages
    var rcdWatchQuery2 = 'conversation_id=' + c.currentConversation + "^role=assistant";
    spUtil.recordWatch($scope, "x_neuronow_openai_conversation_message", rcdWatchQuery2, function(name){
        c.pullThreads();
    });

    // Retrieves and processes conversation threads
    c.pullThreads = function() {
        c.data.action = 'pullThread';
        c.data.currentConversation = c.currentConversation;

        c.server.update().then(function(response) {
            var conversationThreads = response.conversationThreads.map(function(thread) {
                return {
                    role: thread.role,
                    escMsg: hasCodeBlock(thread.message),
                    date: thread.date.substr(0, thread.date.lastIndexOf(":"))
                };
            });

            c.responseText = conversationThreads;
            highLightAll();
            c.userInput = '';

            // Scrolls to the bottom of the feed
            $('#response-feed').animate({
                scrollTop: $("#response-feed").offset().top + 5000000000
            }, 500);
        });
    };

    // Checks for code blocks and formats them appropriately
    function hasCodeBlock(content) {
        content = replaceQuotesAndApostrophes(content);

        if (content.includes("```")) {
            var codeContent = content.replace(/```(\w+)\s*([\s\S]+?)```/g, '<pre class=\"language-$1\"><code class=\"language-$1\">$2</code></pre>');
            return escapeHtmlMain(codeContent);
        }
        return escapeHtmlMain(content);
    }

    // Escapes HTML entities, excluding content inside <code> tags
    function escapeHtmlMain(htmlStr) {
        var entityMap = {
            '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', '\'': '&#39;', '/': '&#x2F;', '\`': '&#x60;', '=': '&#x3D;'
        };

        function escapeHtml(text) {
            return text.replace(/[&<>"'`=\/]/g, function (s) { return entityMap[s]; });
        }

        htmlStr = htmlStr.replace(/<code\s+class="language-html">([\s\S]*?)<\/code>/g, function (match, innerContent) {
            return '<code>' + escapeHtml(innerContent) + '</code>';
        });

        var inCodeTag = false;
        return htmlStr.split(/(<\/?code\s+class="language-html"[^>]*>)/).map(function (segment) {
            if (segment.startsWith('<code class="language-html"')) {
                inCodeTag = true;
                return segment;
            } else if (segment === '</code>') {
                inCodeTag = false;
                return segment;
            }

            if (!inCodeTag) {
                return segment.replace(/(['"`])(.*?)(['"`])/g, function (match, p1, p2, p3) {
                    if (p1 === p3) {
                        return p1 + escapeHtml(p2) + p3;
                    }
                    return match;
                });
            } else {
                return segment;
            }
        }).join('');
    }

    // Replaces quotes and apostrophes with HTML entities
    function replaceQuotesAndApostrophes(text) {
        return text.replace(/"(\w+)"|'(\w+)'|(\w)'(\w)/g, function(match, doubleQuoted, singleQuoted, beforeApostrophe, afterApostrophe) {
            return doubleQuoted ? '&quot;' + doubleQuoted + '&quot;'
                 : singleQuoted ? '&#39;' + singleQuoted + '&#39;'
                 : beforeApostrophe + '&#39;' + afterApostrophe;
        });
    }

    // Highlights all syntax elements using Prism.js
    function highLightAll() {
        setTimeout(function() { window.Prism.highlightAll(); }, 0);
    }

    // Retrieves and sets the current conversation ID
    function checkAndSetConversationId() {
        var conversationId = c.conversation?c.conversation:localStorage.getItem('conversationId');
        if (c.conversation) {
            localStorage.setItem('conversationId', conversationId);
        } 
        return conversationId;
    }

    // Retrieves and sets the current conversation thread ID
    function checkAndSetConversationThreadId() {
        var conversationThreadId = c.conversationThread?c.conversationThread:localStorage.getItem('conversationThreadId');
        if (c.conversationThread) {
            localStorage.setItem('conversationThreadId', conversationThreadId);
        } 
        return conversationThreadId;
    }

    // Capitalizes the first letter of each word in a string
    function capitalizeWords(str) {
        return str.split(' ').map(function(word) {
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }).join(' ');
    }

    c.pullThreads();
    highLightAll();
	
		//materialize action not working so added this for now
	$(document).ready(function() {
		// Event for focus
		$("textarea").focus(function() {
			$('#chat-input-text').addClass("active");
		});

		// Event for blur
		$("textarea").blur(function() {
			// Check if the textarea is empty
			if ($(this).val().trim() === "") {
				$('#chat-input-text').removeClass("active");
			} else {
				$('#chat-input-text').addClass("active");
			}
		});

		// On page load, check initial state
		$("textarea").each(function() {
			if ($(this).val().trim() !== "") {
				$('#chat-input-text').addClass("active");
			}
		});
	});


	

}
]]></client_script>
        <controller_as>c</controller_as>
        <css>/* VARIABLES */
$backGroundColor:#565869;
$orangeCicle:#ff8f00;
$babyBlue:#bbdefb;
$blueContrast:#565869;



/* WIDGET */
.widget-title {
  text-align: center !important;
  font-size: 1.5em !important;
  margin-bottom: 1em !important;
}

.chatgpt-widget {
  height: 95vh !important;
  margin-top: -5px !important;
  font-family: 'Helvetica Neue', Arial, sans-serif !important;
  background-color: $backGroundColor !important; /* Main page body background */
  color: #ffffff !important;
  border-radius: 5px !important;
  padding: 20px !important;
  //box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5) !important;
  display: flex !important;
  flex-direction: column !important;
  justify-content: space-between !important;
  overflow: hidden !important; 
}


.msg-owner{
  margin-bottom: -5px;
  margin-left: -10px;
}

.msg-owner-dt{
  margin-bottom: 10px;
  margin-left: -10px;
}

.msg-owner-text{
  font-size:.7em;
  font-weight:bolder;
  color: $blueContrast;
}

.msg-owner-dt-text{
  font-size:.6em;
  font-weight:bold;
  color: $blueContrast;
}




/* RESPONSE */
.response-panel {
  padding: 4px !important;
  margin-bottom: 1em !important;
  overflow-y: auto !important;
  border-radius: 8px !important;
  
}

div.card-panel{
  border-radius: 4px !important;
}

.response-text{
  color:$backGroundColor;
  font-size:.9em;
  white-space: pre-wrap;
}



.response-panel::-webkit-scrollbar {
  width: 8px;               /* width of the entire scrollbar */
}

.response-panel::-webkit-scrollbar-track {
  background: #bbdefb;        /* color of the tracking area */
}

.response-panel::-webkit-scrollbar-thumb {
  background-color: $backGroundColor;    /* color of the scroll thumb */
  border-radius: 15px;       /* roundness of the scroll thumb */
  border: 2px solid #bbdefb;  /* creates padding around scroll thumb */
}


/* CHAT INPUT */
#chat-input-text {
  font-weight: bold;  
}

.chat-focus-column {
  width:80%;  
}

#chat-input {
  font-size: large;
  color:#bbdefb !important;
}

#chat-input:focus {
  border-bottom: 1px solid #e0e0e0 !important;
  box-shadow: 0 1px 0 0 #e0e0e0 !important;  
}

#chat-submit{
  border-radius: 4px;
  background-color: #bbdefb !important;
  color:#565869 !important;
}


/* CODE HIGHLIGHT */
code[class*="language-"], pre[class*="language-"] { 
  text-shadow: 0 0px transparent;
    white-space: pre-wrap;
  font-size:.88em;
}

.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {
  background: hsla(0, 0%, 0%, 0);  
}

.card-panel{   
  background-color: #bbdefb !important;  
}





/* RESPONSIVENESS */

@media (max-width: 768px) {
  .input-group {
    width: 100% !important; /* Full width on mobile devices */
  }

  .chat-input {
    margin-bottom: 0.5em !important;
    margin-right: 0 !important;
  }

  .btn-refined {
    width: 100% !important;
    padding: 10px 0 !important;
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>gpt-module</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>GPT Module</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	var currentUserDetails = getCurrentUserDetails();

  data.agentName = gs.getProperty('x_neuronow.gpt.openai.agent.name');
	data.portalTitle = gs.getProperty('x_neuronow.gpt.portal.title');
	data.chatInputPlaceHolder = gs.getProperty('x_neuronow.gpt.chat.input.placeholder');
		
	var currUserSysId = currentUserDetails.sysID;
	data.userName = currentUserDetails.firstName;
	data.userFullName = currentUserDetails.fullName;
	var gpt = new x_neuronow.gpt();

	var conversations = gpt.getUserConversations(currUserSysId);
	var primaryConversation = conversations[0];
	
	data.conversation = primaryConversation.conversationId;
	data.thread = primaryConversation.threadId;

	if (input && input.action == 'createThread') {			  
		var frmInput = input.frmInput;
		var conversationId = data.conversation;
		var conversationThreadId = data.thread;
		gpt.createThread(frmInput,conversationId,conversationThreadId);
		data.getNewestThreadId = gpt._getThreadIdByConversationId(conversationId);
		return data;
	}


	if (input && input.action == 'pullThread') {			  
		var currentConversation = input.currentConversation;
		data.conversationThreads = gpt.currentConversationThreads(currentConversation);
		return data;
	}


	function getCurrentUserDetails() {
		
		//scoped app method of getting current user data
		var userSysId = gs.getUserID();
		
		var user = new GlideRecord('sys_user');
		user.get(userSysId);
		var userId = user.user_name.toString();
		var userFirstName = user.first_name.toString();
		var userLastName = user.last_name.toString();
		var userFullName = userFirstName + ' ' + userLastName;
		
		var userDetails = {
			userID: userId,   // Get the user ID (username)
			fullName: userFullName, // Get the full name
			firstName: userFirstName, // Get the first name
			lastName: userLastName,   // Get the last name
			sysID: userSysId // Get the unique identifier (sys_id)
		};

		return userDetails;
	}




})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-22 01:41:54</sys_created_on>
        <sys_id>4c3a6e4583ced2104af4f065eeaad3c7</sys_id>
        <sys_mod_count>65</sys_mod_count>
        <sys_name>GPT Module</sys_name>
        <sys_package display_value="NeuroNow" source="x_neuronow">5f95b97c834a5210223556e0deaad3b9</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeuroNow">5f95b97c834a5210223556e0deaad3b9</sys_scope>
        <sys_update_name>sp_widget_4c3a6e4583ced2104af4f065eeaad3c7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-24 02:12:40</sys_updated_on>
        <template><![CDATA[<div class="widget-example chatgpt-widget">

  <h3 class="widget-title">{{data.portalTitle}}</h3>

  <!-- Response Panel -->
  <div  id="response-feed" class="response-panel row chat-focus-column" ng-for="c.responseText && c.responseText.length > 0">
    <div id='it' class="col m12" ng-repeat="response in c.responseText">
      <div class="card-panel">
        <!-- Displaying the message -->
        <div ng-if="response.role=='ASSISTANT' || (response.role=='user' && (!c.userName || c.userName == ''))" class="msg-owner"><span class="msg-owner-text" ng-bind="c.agentName"></span></div>
        <div ng-if="response.role=='USER' && (c.userName && c.userName != '') " class="msg-owner"><span class="msg-owner-text" ng-bind="c.userFullName"></span></div>
        <div class="msg-owner-dt"><span class="msg-owner-dt-text" ng-bind="response.date"></span></div>
        <span class="response-text" ng-bind-html="response.escMsg"></span>
      </div>
    </div>
  </div>

  
  
  <div class="row chat-focus-column">
    <form class="col m12">
      <div class="row">
        <div class="chat-input-group input-field col s11">
          <textarea id="chat-input" class="materialize-textarea" ng-model="c.userInput"></textarea>
          <label for="chat-input" id="chat-input-text" class="grey-text text-lighten-2">{{data.chatInputPlaceHolder}}</label>          
        </div>
        <div class="col s1">
          <button id="chat-submit" class="btn pulse waves-effect waves-light btn-small" type="submit" name="action" ng-click="c.createThread()">
            <i class="material-icons center">send</i>
          </button>
        </div>
      </div>
    </form>
  </div>

  <!-- Prism JS -->
  <script src="/x_neuronow.prismJS.jsdbx"></script>
  <link rel="stylesheet" href="/7291f0498386d2104af4f065eeaad31e.spcssdbx">
  

  <!-- Prism Toolbar -->
  <script src="/x_neuronow.prismToolBarJS.jsdbx"></script>
  <link rel="stylesheet" href="/baa1f0498386d2104af4f065eeaad325.spcssdbx">


  <!-- Prism Copy - scripted CSS -->
  <script src="/x_neuronow.prismCopyJS.jsdbx"></script>
  
  <!-- Prism Show Language -->
  <script src="/x_neuronow.prismLanguageJS.jsdbx"></script>


</div>
]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>4c3a6e4583ced2104af4f065eeaad3c7</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-22 02:00:19</sys_created_on>
        <sys_id>f96e2ec983ced2104af4f065eeaad3a2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-22 02:00:19</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
