<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_neuronow.gpt</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>gpt</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var gpt = Class.create();
gpt.prototype = {

    initialize: function() {
        this.restMessages = {
            'createThread': {
                messageName: 'OpenAI',
                methodName: 'createThread'
            },
            'addMessage': {
                messageName: 'OpenAI',
                methodName: 'addMessage'
            },
            'runThread': {
                messageName: 'OpenAI',
                methodName: 'runThread'
            },
            'runStatus': {
                messageName: 'OpenAI',
                methodName: 'runStatus'
            },
            'getMessage': {
                messageName: 'OpenAI',
                methodName: 'getMessage'
            },
            'functionResponse': {
                messageName: 'OpenAI',
                methodName: 'functionResponse'
            },
            'deleteThread': {
                messageName: 'OpenAI',
                methodName: 'deleteThread'
            }
        };

        this.apiKey = this._getApiKey();
        this.assistantId = gs.getProperty('x_neuronow.gpt.openai.assistantid');
        this.toolCallId = '';
        this.threadId = null;
        this.runId = null;
        this.conversationId = null;


    },

    deleteConversationThreads: function(ConversationId) {

        var threadIds = [];
        var seenThreadIds = {}; // Object to track unique thread IDs
        var gr = new GlideRecord('x_neuronow_openai_conversation_message');
        var gr_q = 'conversation_id=' + ConversationId;
        gr.addQuery(gr_q);
        gr.query();

        while (gr.next()) {
            gs.info('jd test script include: ' + gr.sys_id.toString());
            var threadId = gr.getValue('thread_id');
            if (!seenThreadIds[threadId]) {
                seenThreadIds[threadId] = true;
                threadIds.push(threadId);
            }
            gr.deleteRecord();
        }

        var thread = threadIds[0];

        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.deleteThread.messageName, this.restMessages.deleteThread.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + this.apiKey);
        restMessage.setStringParameterNoEscape('threadId', thread);

        var response = restMessage.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();

        //we delete the conversation record last so that we have a reference until the end
        var delConv = new GlideRecord('x_neuronow_openai_conversation');
        delConv.get(ConversationId);
        delConv.deleteRecord();

        // gs.info('Deleted ' + deletedCount + ' thread records with thread_id: ' + thread); 

    },


    /**
     * Retrieves an array of message objects from the 'x_neuronow_openai_conversation_message' table.
     * @param {string} currentConversationId - The sys_id of the current conversation.
     * @returns {Array} An array of objects, each containing the message and role.
     */
    currentConversationThreads: function(currentConversationId) {
        var threads = [];
        var initialUserThreadFound = false;
        var messageGR = new GlideRecord('x_neuronow_openai_conversation_message');
        messageGR.addQuery('conversation_id', currentConversationId);
        messageGR.orderBy('number'); // Sorting in ascending order by 'number'
        messageGR.query();

        while (messageGR.next()) {
            var roleString = messageGR.getValue('role').toString();
            var role = roleString.toUpperCase();
            var message = messageGR.getValue('message');
            var date = messageGR.sys_created_on.getDisplayValue();

            // Start adding threads to the array only after finding the first 'user' role
            if (!initialUserThreadFound && role === 'USER') {
                initialUserThreadFound = true;
            }

            if (initialUserThreadFound) {
                threads.push({
                    message: message,
                    role: role,
                    date: date
                });
            }
        }

        return threads;
    },

    /**
     * Retrieves or creates conversations for a given user and gets their associated thread IDs.
     * @param {string} userSysId - The sys_id of the user.
     * @returns {Array} An array of objects containing conversation IDs and thread IDs.
     */
    getUserConversations: function(userSysId) {
        var assistantId = this.assistantId;
        var conversations = [];
        var convGR = new GlideRecord('x_neuronow_openai_conversation');
        convGR.addQuery('user', userSysId);
        convGR.query();

        while (convGR.next()) {
            var conversationId = convGR.getUniqueValue();
            var threadId = this._getThreadIdByConversationId(conversationId);
            conversations.push({
                conversationId: conversationId,
                threadId: threadId
            });
        }

        if (conversations.length === 0) {
            // Create a new conversation record if no existing records are found
            convGR.initialize();
            convGR.user = userSysId;
            convGR.assistant_id = assistantId;
            convGR.insert();
            var newConversationId = convGR.getUniqueValue();
            // Assuming thread is created elsewhere or null if not created yet
            conversations.push({
                conversationId: newConversationId,
                threadId: null
            });
        }

        this.conversationId = conversations[0].conversationId;
        return conversations;
    },

    /**
     * Retrieves the thread ID associated with a given conversation ID.
     * @param {string} conversationId - The ID of the conversation.
     * @returns {string|null} The thread ID if found, otherwise null.
     */
    _getThreadIdByConversationId: function(conversationId) {
        var threadId = null;

        var gr = new GlideRecord('x_neuronow_openai_conversation_message'); // Replace with actual table name
        gr.addQuery('conversation_id', conversationId);
        gr.orderByDesc('sys_created_on');
        gr.query();

        if (gr.next()) {
            threadId = gr.getValue('thread_id');
        }

        return threadId;
    },

    /**
     * Creates a user conversation message record in the 'x_neuronow_openai_conversation_message' table.
     * @param {string} msgValue - The message content.
     * @param {string} role - The message content.
     */
    _createConversationMessage: function(msgValue, role) {
        var messageGR = new GlideRecord('x_neuronow_openai_conversation_message');
        messageGR.initialize();
        messageGR.message = msgValue;
        messageGR.conversation_id = this.conversationId;
        messageGR.role = role;
        messageGR.assistant_id = this.assistantId;
        messageGR.thread_id = this.threadId;
        var msgId = messageGR.insert();

        return msgId;
    },

    createThread: function(msg, conversationId, conversationThreadId) {
        this.toolCallId = '';
        this.threadId = conversationThreadId || '';

        this._createConversationMessage(msg, 'user'); // Save the message immediately

        if (!this.threadId || this.threadId === 'undefined') {
            var restMessage = new sn_ws.RESTMessageV2(this.restMessages.createThread.messageName, this.restMessages.createThread.methodName);
            restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + this.apiKey);
            var response = restMessage.execute();
            var responseObj = JSON.parse(response.getBody());
            if (responseObj.id) {
                this.threadId = responseObj.id;
            }
        }

        gs.eventQueue(
            'x_neuronow.gpt.openai.async.run',
            null,
            JSON.stringify({
                msg: msg,
                conversationId: conversationId,
                threadId: this.threadId
            })
        );

        return {
            status: 'submitted',
            threadId: this.threadId,
            conversationId: conversationId
        };
    },

    _addMessage: function(msgValue) {
        var apiKey = this.apiKey;

        var dataObj = {
            "role": "user",
            "content": msgValue
        };

        var requestBody = JSON.stringify(dataObj);

        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.addMessage.messageName, this.restMessages.addMessage.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + apiKey);
        restMessage.setStringParameterNoEscape('threadId', this.threadId);
        restMessage.setRequestBody(requestBody);

        var response = restMessage.execute();
        var responseBody = response.getBody();
        var responseObj = JSON.parse(responseBody);

        if (responseObj.id) {
            this.messageId = responseObj.id;
        }

        return this._runThread(); // Continue GPT flow
    },

    /**
     * Processes an OpenAI request asynchronously using a pre-saved message and thread.
     * @param {Object} context - Object containing msg, threadId, and conversationId
     */
    processAsyncRequest: function(context) {
        this.threadId = context.threadId;
        this.conversationId = context.conversationId;

        // Trigger the actual GPT request with msg
        this._addMessage(context.msg);
    },

    _runThread: function() {

        var apiKey = this.apiKey;

        var dataObj = {
            "assistant_id": this.assistantId
            // "assistant_id": this.assistantId,
            // "tool_choice": "required" // Force the model to call the defined function
            // // "model": "gpt-4.1", // Optional, define explicitly if needed
            // // "temperature": 0.2 // Optional, for determinism
        };

        var requestBody = JSON.stringify(dataObj);

        var threadId = this.threadId;

        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.runThread.messageName, this.restMessages.runThread.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + apiKey);
        restMessage.setStringParameterNoEscape('threadId', threadId);

        // Set the request body
        restMessage.setRequestBody(requestBody);

        var response = restMessage.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();

        // gs.info('jd test: response ' + JSON.stringify(response));

        // Parse the response body to extract the thread ID
        var responseObj = JSON.parse(responseBody);
        var runId = responseObj.id; // Replace with the actual path to the thread ID in the response

        if (runId) {
            this.runId = runId;
        }

        return this._callAndCheckStatus();;

    },

    _runStatus: function() {
        var apiKey = this.apiKey;
        var threadId = this.threadId;
        var runId = this.runId;

        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.runStatus.messageName, this.restMessages.runStatus.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + apiKey);
        restMessage.setStringParameterNoEscape('threadId', threadId);
        restMessage.setStringParameterNoEscape('runId', runId);

        var response = restMessage.execute();
        var responseObj = JSON.parse(response.getBody());
        var runStatus = responseObj.status;

        if (runStatus === 'requires_action' && responseObj.required_action.type === 'submit_tool_outputs') {
            var toolCalls = responseObj.required_action.submit_tool_outputs.tool_calls;
            var toolOutputs = [];

            for (var i = 0; i < toolCalls.length; i++) {
                var toolCall = toolCalls[i];
                var functionName = toolCall.function.name;
                var functionArgs = JSON.parse(toolCall.function.arguments);

                this.toolCallId = toolCall.id;

                var toolResponse = this._runTool({
                    openAiFunction: functionName,
                    openAifunctionArguments: functionArgs
                });

                toolOutputs.push({
                    tool_call_id: toolCall.id,
                    output: toolResponse
                });
            }

            this._functionResponseBatch(toolOutputs);
        }

        return runStatus;
    },

    _functionResponseBatch: function(toolOutputs) {
        var apiKey = this.apiKey;
        var threadId = this.threadId;
        var runId = this.runId;

        var dataObj = {
            "tool_outputs": toolOutputs
        };

        var requestBody = JSON.stringify(dataObj);
        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.functionResponse.messageName, this.restMessages.functionResponse.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + apiKey);
        restMessage.setStringParameterNoEscape('threadId', threadId);
        restMessage.setStringParameterNoEscape('runId', runId);
        restMessage.setRequestBody(requestBody);

        var response = restMessage.execute();

        return this._callAndCheckStatus();
    },

    _functionResponse: function(toolResp) {

        var apiKey = this.apiKey;
        var threadId = this.threadId;
        var runId = this.runId;

        var dataObj = {
            "tool_outputs": [{
                "tool_call_id": this.toolCallId,
                "output": toolResp
            }]
        };

        var requestBody = JSON.stringify(dataObj);
        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.functionResponse.messageName, this.restMessages.functionResponse.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + apiKey);
        restMessage.setStringParameterNoEscape('threadId', threadId);
        restMessage.setStringParameterNoEscape('runId', runId);


        // Set the request body
        restMessage.setRequestBody(requestBody);

        var response = restMessage.execute();

        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();

        // Parse the response body to extract the thread ID
        var responseObj = JSON.parse(responseBody);

        var callAndCheckStatus = this._callAndCheckStatus();
        return callAndCheckStatus;


    },


    /**
     * Retrieves the latest assistant message from OpenAI and stores it if not already recorded recently.
     */
    _getMessage: function() {
        var apiKey = this.apiKey;
        var threadId = this.threadId;

        var restMessage = new sn_ws.RESTMessageV2(this.restMessages.getMessage.messageName, this.restMessages.getMessage.methodName);
        restMessage.setStringParameterNoEscape('apiKey', 'Bearer ' + apiKey);
        restMessage.setStringParameterNoEscape('threadId', threadId);

        var response = restMessage.execute();
        var responseBody = response.getBody();
        var responseObj = JSON.parse(responseBody);

        var msgValue = responseObj.data[0].content[0].text.value.trim();

        // Define the deduplication window (e.g., 60 seconds)
        var now = new GlideDateTime();
        var recentThreshold = new GlideDateTime();
        recentThreshold.addSeconds(-10); // adjust as needed

        // Check for duplicate assistant message within last 60 seconds
        var existing = new GlideRecord('x_neuronow_openai_conversation_message');
        var existing_q = 'conversation_id=' + this.conversationId +
            '^role=assistant^message=' + msgValue +
            '^sys_created_on>=' + recentThreshold;
        existing.addQuery(existing_q);
        existing.query();

        if (!existing.next()) {
            this._createConversationMessage(msgValue, 'assistant');
        } else {
            gs.info('[GPT] Skipping assistant message: duplicate found in recent window.');
        }
    },

    // _runTool: function(toolMsg) {

    //     var resp;
    //     var gptFunctions = new global.gptFunctions();

    //     // Map of functions
    //     var openAiTools = {
    //         "get_user_data": gptFunctions._openAiFunction_get_user_data,
    //         "create_user": gptFunctions._openAiFunction_create_user,
    // 		"create_catalog_item": gptFunctions._openAiFunction_create_catalog_item,
    // 		"update_catalog_item": gptFunctions._openAiFunction_update_catalog_item,
    // 		"get_category_by_name": gptFunctions._openAiFunction_get_category_by_name,
    // 		"get_catalog_item": gptFunctions._openAiFunction_get_catalog_item,
    // 		"list_catalog_categories": gptFunctions._openAiFunction_list_catalog_categories
    //     };

    //     var openAiFunction = toolMsg.openAiFunction;
    //     var openAifunctionArguments = toolMsg.openAifunctionArguments;

    //     // Evaluate and call the function
    //     if (openAiTools[openAiFunction]) {
    //         resp = openAiTools[openAiFunction](openAifunctionArguments);
    //     } else {
    //         gs.info("No such function mapped for " + openAiFunction);
    //     }
    //     return resp;
    // },

    _runTool: function(skillMsg) {
        var runner = new global.gptSkillRunner();
        var resp = runner.run(skillMsg.openAiFunction, skillMsg.openAifunctionArguments);
        return resp;
    },

    _callAndCheckStatus: function() {
        var status = this._runStatus();
        var holding, terminate;
        var cnt = 0;
        var timeOut = 10;

        while (cnt <= timeOut && (status === 'queued' || status === 'in_progress' || status === 'requires_action')) {
            this._sleep(1000); // Sleep for 10 seconds (not recommended, see note below)
            holding = this._runStatus();

            if (holding === 'completed') {
                terminate = this._getMessage(); // Call the next method once the status is complete
                return;
            }
            cnt++;
        }
        return 'Transaction Timeout';
    },

    _getApiKey: function() {
        var e = new global.ScopedAppUtil();
        return e.gptApiKeyDecrypt();
    },

    _sleep: function(milliseconds) {
        var start = new Date().getTime();
        while (new Date().getTime() < start + milliseconds) {
            //nothing
        }
    },

    /**
     * Escapes single and double quotes in a string.
     * @param {string} str - The string to escape.
     * @returns {string} The escaped string.
     */
    _escapeQuotes: function(str) {
        if (!str) return str;
        return str.replace(/"/g, '\\"').replace(/'/g, "\\'");
    },

    type: 'gpt'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-22 01:06:44</sys_created_on>
        <sys_id>5ff1ea0d838ed2104af4f065eeaad36e</sys_id>
        <sys_mod_count>96</sys_mod_count>
        <sys_name>gpt</sys_name>
        <sys_package display_value="NeuroNow" source="x_neuronow">5f95b97c834a5210223556e0deaad3b9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeuroNow">5f95b97c834a5210223556e0deaad3b9</sys_scope>
        <sys_update_name>sys_script_include_5ff1ea0d838ed2104af4f065eeaad36e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-13 03:28:37</sys_updated_on>
    </sys_script_include>
</record_update>
